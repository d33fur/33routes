version: '3.8'

services:
  33routes_postgres:
    container_name: 33routes_postgres
    image: postgres:17-alpine
    env_file: 
      - .env
    volumes:
      - ./database/postgres/init:/docker-entrypoint-initdb.d
      - ./database/postgres/data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 10s
      retries: 5
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - user_network
        
  33routes_redis:
    container_name: 33routes_redis
    image: redis:7-alpine
    volumes:
      - ./database/redis/data:/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 10s
      retries: 5
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - user_network

  # 33routes_auth_service:
  #   container_name: 33routes_auth_service
  #   build:
  #     context: ./auth_service
  #     dockerfile: Dockerfile
  #   env_file: 
  #     - .env
  #   depends_on:
  #     33routes_postgres:
  #       condition: service_healthy
  #     33routes_redis:
  #       condition: service_healthy
  #   ports:
  #     - "8001:8001"
  #   restart: always
  #   networks:
  #     - user_network

  # 33routes_user_service:
  #   container_name: 33routes_user_service
  #   build:
  #     context: ./user_service
  #     dockerfile: Dockerfile
  #   env_file: 
  #     - .env
  #   depends_on:
  #     33routes_postgres:
  #       condition: service_healthy
  #     33routes_redis:
  #       condition: service_healthy
  #   ports:
  #     - "8001:8001"
  #   restart: always
  #   networks:
  #     - user_network

networks:
  user_network:
    driver: bridge
  # admin_network:
  #   driver: bridge